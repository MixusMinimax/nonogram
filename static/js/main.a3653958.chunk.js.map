{"version":3,"sources":["Field.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Axis","Field","props","reset","setState","state","health","current","max","fields","segments","columns","rows","dragging","dragStart","x","y","dragButton","lastDraggedCell","height","push","width","completed","wrong","initializedStates","solution","X","Y","map","axis","Array","from","_","i","lastWasMarked","j","isMarked","length","size","this","updateSegments","button","cascade","s","correct","isDone","offAxis","getAt","t","on","off","dragDirection","direction","line","currentIndex","count","_i","currentIndexActual","positive","delay","setTimeout","markCell","dx","dy","event","preventDefault","undefined","pos","startCoord","endCoord","offset","coord","className","every","seg","onMouseLeave","$event","mouseUp","row","onMouseEnter","cell","onMouseDown","mouseDown","onMouseUp","onMouseMove","mouseMove","Component","defaultProps","App","onContextMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3653958.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Field.scss'\n\nexport type CellState = 'none' | 'marked' | 'unmarked'\nenum Axis { X, Y }\n\ntype SegmentNumber = {\n  size: number,\n  completed: boolean,\n}\n\ntype FieldProps = {\n  width: number,\n  height: number,\n  health: number,\n  initializedStates: boolean[][], // if true, initializes the cell to the solution\n  solution: boolean[][], // if true, marked is the solution.\n  cascade: boolean,\n}\n\ntype FieldState = {\n  health: { current: number, max: number },\n  fields: { x: number, y: number, completed: boolean, wrong: boolean, state?: CellState }[][],\n  segments: { columns: SegmentNumber[][], rows: SegmentNumber[][] },\n  dragStart: { x: number, y: number },\n  lastDraggedCell: number,\n  dragging: boolean,\n  dragDirection?: Axis,\n  dragButton: number,\n}\n\nclass Field extends Component<FieldProps, FieldState> {\n\n  static defaultProps = {\n    cascade: false,\n    health: 5,\n  }\n\n  constructor(props: FieldProps) {\n    super(props)\n    this.reset(props, false)\n  }\n\n  reset(props: FieldProps, setState = true): void {\n    const state: FieldState = {\n      health: { current: props.health, max: props.health },\n      fields: [],\n      segments: { columns: [], rows: [] },\n      dragging: false,\n      dragStart: { x: 0, y: 0 },\n      dragButton: 0,\n      lastDraggedCell: 0,\n    }\n\n    for (let y = 0; y < props.height; ++y) {\n      state.fields.push([])\n      for (let x = 0; x < props.width; ++x) {\n        state.fields[y].push({\n          x, y,\n          completed: false,\n          wrong: false,\n          state: props.initializedStates[y][x]\n            ? (props.solution[y][x] ? 'marked' : 'unmarked')\n            : 'none',\n        })\n      }\n    }\n\n    [state.segments.rows, state.segments.columns] = [Axis.X, Axis.Y].map(axis => \n      Array.from(Array(this.props[axis == Axis.X ? 'height' : 'width']), (_, i) => {\n        const segments: SegmentNumber[] = []\n        let lastWasMarked = false\n        for (let j = 0; j < this.props[axis == Axis.X ? 'width' : 'height']; ++j) {\n          const isMarked = axis == Axis.X ? this.props.solution[i][j] : this.props.solution[j][i]\n          if (isMarked && lastWasMarked)\n            segments[segments.length - 1].size++\n          else if (isMarked)\n            segments.push({ size: 1, completed: false })\n          lastWasMarked = isMarked\n        }\n        return segments\n      })  \n    )\n\n    if (setState)\n      this.setState(this.state)\n    else\n      this.state = state\n\n    for (let y = 0; y < props.height; ++y) {\n      for (let x = 0; x < props.width; ++x) {\n        if (props.initializedStates[y][x]) {\n          this.updateSegments(x, y, false)\n        }\n      }\n    }\n  }\n\n  markCell(x: number, y: number, button: number, setState = true, cascade = true): void {\n    if (this.state.fields[y][x].state != 'none') return\n    if (this.state.health.current == 0) {\n      this.setState({ dragging: false })\n      return\n    }\n    let s: CellState | undefined\n    switch (button) {\n      case 0:\n        s = 'marked'\n        break\n      case 2:\n        s = 'unmarked'\n        break\n      default:\n        return\n    }\n    const correct: CellState = this.props.solution[y][x] ? 'marked' : 'unmarked'\n    this.state.fields[y][x].state = correct\n\n    if (correct != s) {\n      this.state.fields[y][x].wrong = true\n      this.setState({\n        dragging: false,\n        health: { ...this.state.health, current: this.state.health.current - 1 },\n      })\n    }\n\n    if (setState)\n      this.setState({ fields: this.state.fields })\n    \n    this.updateSegments(x, y, setState, cascade)\n  }\n\n  updateSegments(x: number, y: number, setState = true, cascade = true): void {\n    for (const axis of [Axis.X, Axis.Y]) {\n\n      // check if col/row is completely done:\n\n      let isDone = true\n      const offAxis = axis == Axis.X ? y : x\n      const length = axis == Axis.X ? this.props.width : this.props.height\n      const getAt = function <T>(t: T[][], on: number, off: number): T {\n        return axis == Axis.X ? t[off][on] : t[on][off]\n      }\n      for (let i = 0; i < length; ++i) {\n        if (getAt(this.props.solution, i, offAxis) && getAt(this.state.fields, i, offAxis).state != 'marked') {\n          isDone = false\n          break\n        }\n      }\n      if (isDone) {\n        for (const seg of this.state.segments[axis == Axis.X ? 'rows' : 'columns'][offAxis])\n          seg.completed = true\n        if (this.props.cascade && cascade) {\n          this.cascade(x, y, axis, true, 20, setState)\n          this.cascade(x, y, axis, false, 20, setState)\n          if (this.state.dragging && setState && axis == this.state.dragDirection)\n            this.setState({ dragging: false })\n        }\n      } else {\n        // check if col/row is partially done from each side:\n        for (let direction = 0; direction < 2; ++direction) {\n          const line = this.state.segments[axis == Axis.X ? 'rows' : 'columns'][offAxis]\n          let currentIndex = 0\n          let count = 0\n          for (let _i = 0; _i < length; ++_i) {\n            let i: number = _i\n            let currentIndexActual: number = currentIndex\n            if (direction == 1) {\n              i = length - 1 - _i\n              currentIndexActual = line.length - 1 - currentIndex\n            }\n            if (getAt(this.state.fields, i, offAxis).state == 'marked')\n              count++\n            else {\n              if (count == line[currentIndexActual].size) {\n                line[currentIndexActual].completed = true\n                ++currentIndex\n              }\n              count = 0\n              if (getAt(this.state.fields, i, offAxis).state == 'none')\n                break\n            }\n          }\n        }\n      }\n    }\n    if (setState)\n      this.setState({ segments: this.state.segments })\n  }\n\n  cascade(x: number, y: number, axis: Axis, positive: boolean, delay: number, setState = true): void {\n    if (x < 0 || x >= this.props.width || y < 0 || y >= this.props.height)\n      return\n    if (setState) {\n      this.state.fields[y][x].completed = true\n      this.setState({ fields: this.state.fields })\n      setTimeout(() => { this.state.fields[y][x].completed = false; this.setState({ fields: this.state.fields }) }, 1000)\n    }\n    this.markCell(x, y, 2, setState, false)\n    const dx = (axis == Axis.X ? 1 : 0) * (positive ? 1 : -1)\n    const dy = (axis == Axis.X ? 0 : 1) * (positive ? 1 : -1)\n    if (setState)\n      setTimeout(() => { this.cascade(x + dx, y + dy, axis, positive, delay, setState) }, delay)\n    else\n      this.cascade(x + dx, y + dy, axis, positive, delay, setState)\n  }\n\n  // Events:\n\n  mouseDown(x: number, y: number, event: React.MouseEvent): void {\n    event.preventDefault()\n    this.setState({ dragStart: {x, y}, dragButton: event.button, dragging: true })\n    this.markCell(x, y, event.button)\n  }\n\n  mouseUp(event: React.MouseEvent): void {\n    event.preventDefault()\n    this.setState({dragging: false, dragDirection: undefined})\n  }\n\n  mouseMove(x: number, y: number): void {\n    if (this.state.dragging) {\n      if (this.state.dragDirection === undefined && (x != this.state.dragStart.x || y != this.state.dragStart.y)) {\n        const dragDirection = x === this.state.dragStart.x ? Axis.Y : Axis.X\n        this.setState({ dragDirection })\n        this.setState({ lastDraggedCell: dragDirection === Axis.X ? this.state.dragStart.x : this.state.dragStart.y })\n      }\n      if (this.state.dragDirection === undefined)\n        return\n      const pos = { x, y }\n      if (this.state.dragDirection === Axis.X)\n        pos.y = this.state.dragStart.y\n      else\n        pos.x = this.state.dragStart.x\n      const startCoord = this.state.lastDraggedCell\n      const endCoord = this.state.dragDirection === Axis.X ? x : y\n      const offset = endCoord < startCoord ? -1 : 1\n      for (let coord = startCoord + offset; startCoord != endCoord && (coord - endCoord) * offset < 0; coord += offset) {\n        if (this.state.dragDirection === Axis.X) {\n          x = coord\n          y = pos.y\n        } else {\n          x = pos.x\n          y = coord\n        }\n        this.markCell(x, y, this.state.dragButton)\n      }\n      this.setState({ lastDraggedCell: this.state.dragDirection === Axis.X ? pos.x : pos.y })\n      this.markCell(pos.x, pos.y, this.state.dragButton)\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <div>\n        <h2>Field works! Dimensions:{this.props.width}x{this.props.height}</h2>\n        <div className=\"health\">\n          {\n            Array.from(Array(this.state.health.max), (_, i) => {\n              return <div className=\"heart\">{ i < this.state.health.current ? '❤️' : '🤍' }</div>\n            })\n          }\n        </div>\n        <table>  \n          <thead>\n            <tr>\n              <th />\n              {\n                this.state.segments.columns.map(segments =>\n                  <th><div className={`segment ${segments.every(seg => seg.completed) ? 'completed' : ''}`}> {\n                    segments.map(seg => <div className={`segment-number ${seg.completed ? 'completed' : ''}`}>{seg.size}</div>)\n                  } </div></th>\n                )\n              }\n            </tr>\n          </thead>\n\n          <tbody onMouseLeave={$event => this.mouseUp($event)}>\n          {this.state.fields.map((row, y) =>\n            <tr>\n              <th onMouseEnter={$event => this.mouseUp($event)}><div className={`segment ${this.state.segments.rows[y].every(seg => seg.completed) ? 'completed' : ''}`}> {\n                this.state.segments.rows[y].map(seg => <div className={`segment-number ${seg.completed ? 'completed' : ''}`}>{seg.size}</div>)\n              } </div></th>\n              {\n                row.map(cell =>\n                  <td\n                    onMouseDown={$event => this.mouseDown(cell.x, cell.y, $event)}\n                    onMouseUp={$event => this.mouseUp($event)}\n                    onMouseMove={() => this.mouseMove(cell.x, cell.y)}\n                  >\n                    <div\n                      className={ `field-cell ${cell.state} ${cell.wrong ? 'wrong' : ''} ${cell.completed ? 'completed' : ''}` }\n                    >\n                      <div className=\"x\">╳</div>\n                      <div className=\"overlay\"></div>\n                    </div>\n                  </td>\n                )\n              }\n            </tr>\n          ) }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default Field","import React, { Component } from 'react'\nimport './App.scss'\nimport Field from './Field'\n\ntype AppState = {\n  solution: boolean[][],\n  initializedStates: boolean[][],\n}\n\nclass App extends Component<Record<string, never>, AppState> {\n  constructor(props: Record<string, never>) {\n    super(props)\n    this.state = {\n      solution: [\n        [true, true, false, false, true, true, true],\n        [false, true, false, true, true, false, false],\n        [false, true, true, true, true, false, true],\n        [true, false, true, false, false, false, true],\n        [true, false, true, false, false, false, false],\n        [false, true, false, true, false, true, true],\n        [true, false, false, false, true, false, false]\n      ],\n      initializedStates: [\n        [false, false, false, true, false, false, false],\n        [false, false, false, false, true, false, false],\n        [false, false, false, false, false, true, false],\n        [false, false, false, false, false, false, true],\n        [false, false, false, false, false, true, false],\n        [false, false, false, false, true, false, false],\n        [true, false, false, true, true, false, false]\n      ],\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <div\n        onContextMenu={$event => { $event.preventDefault() }}\n        className=\"App\"\n      >\n        <h1>Hello, World!</h1>\n        <Field\n          width={7}\n          height={7}\n          initializedStates={this.state.initializedStates}\n          solution={this.state.solution}\n          cascade={true}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}